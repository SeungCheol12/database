--1. 사원번호가 176인 사원의 LAST_NAME;, 부서번호 정보 조회
SELECT
	LAST_NAME,
	DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	EMPLOYEE_ID = 176;

--2. 연봉이 12000 이상 되는 직원들의 LAST_NAME, 급여 조회
SELECT
	LAST_NAME,
	SALARY
FROM
	EMPLOYEES e
WHERE
	SALARY >= 12000;

--3. 연봉이 5000~12000 범위가 아닌 사람들의 LAST_NAME, 급여 조회
SELECT
	e.LAST_NAME ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.SALARY < 5000
	OR e.SALARY >12000;

--4. 20번, 50번 부서에 근무하는 사원들의 LAST_NAME, 부서번호를 오름차순 조회
SELECT
	LAST_NAME,
	DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	DEPARTMENT_ID IN (20, 50)
ORDER BY
	DEPARTMENT_ID ASC;

--5. 커미션을 받는 모든 사원들의 LAST_NAME, 급여(내림차순), 커미션(내림차순)을 조회
SELECT
	LAST_NAME,
	SALARY,
	COMMISSION_PCT
FROM
	EMPLOYEES e
WHERE
	COMMISSION_PCT > 0
ORDER BY
	SALARY DESC,
	COMMISSION_PCT DESC;

--6. 연봉이 2500, 3500, 7000이 아니며 직무가 SA_REP, ST_CLERK인 사원조회
SELECT
	*
FROM
	EMPLOYEES e
WHERE
	e.SALARY NOT IN (2500, 3500, 7000) AND 
	e.JOB_ID IN ('SA_REP', 'ST_CLERK');
	
--7. 2015/02/20 ~ 2015/05/01 사이에 고용된 사원들의 LAST_NAME, 사번, 고용일자(내림차순) 조회
SELECT
	e.LAST_NAME ,
	e.EMPLOYEE_ID ,
	e.HIRE_DATE
FROM
	EMPLOYEES e
WHERE
	e.HIRE_DATE BETWEEN '2015/02/20' AND '2015/05/01'
ORDER BY
	e.HIRE_DATE DESC;

--8. 20번, 50번 부서에 근무하는 사원들 중에서 연봉이 5000~12000 인 사원들의 last_name, 급여(오름차순)를 조회
SELECT
	e.LAST_NAME ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	 e.DEPARTMENT_ID IN (20, 50)
	AND 
	e.SALARY BETWEEN 5000 AND 12000
ORDER BY
	e.SALARY ASC ;

--9.연봉이 5000~12000 이 아닌 사원들의 last_name, 급여(오름차순)를 조회
SELECT
	e.LAST_NAME ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	 e.DEPARTMENT_ID IN (20, 50)
	AND 
	e.SALARY NOT BETWEEN 5000 AND 12000
ORDER BY
	e.SALARY ASC;

--10. 2015/02/20 ~ 2015/05/01 사이에 고용된 사원들의 LAST_NAME, 사번, 고용일자(내림차순) 조회 between a and b 사용

--11. last_name 에 u가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT
	e.LAST_NAME, 
	e.EMPLOYEE_ID
FROM 
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%u%';
--12. last_name 의 4번째 글자가 a인 사원들의 LAST_NAME 조회
SELECT
	e.LAST_NAME  
FROM 
	EMPLOYEES e 
WHERE 
e.LAST_NAME LIKE '___a%';

--13. last_name 에 a 혹은 e 글자가 포함되는 사원들의 LAST_NAME(오름차순) 조회
SELECT
	e.LAST_NAME
FROM 
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%a%'
	OR e.LAST_NAME LIKE '%e%'
ORDER BY
	e.LAST_NAME ASC;

--14. last_name 에 a와 e 가 포함되는 사원들의 LAST_NAME(오름차순) 조회
SELECT
	e.LAST_NAME
FROM 
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%a%e%'
	OR e.LAST_NAME LIKE '%e%a%'
ORDER BY
	e.LAST_NAME ASC;

--15. 매니저 아이디가 없는 사원들의 last_name, job_id 조회
SELECT
	e.LAST_NAME ,
	e.JOB_ID
FROM
	EMPLOYEES e
WHERE
	e.MANAGER_ID IS NULL ;

--16. 직무가 ST_CLERK 인 사원이 근무하고 있지 않은 부서 id 조회 단, 부서번호가 null인 곳은 제외
SELECT
	DISTINCT 
	e.JOB_ID
FROM
	EMPLOYEES e
WHERE
	e.JOB_ID NOT IN ('ST_CLERK')
	AND e.DEPARTMENT_ID IS NOT NULL ;

--17. commission_pct 가 null 이 아닌 사원들 중에서 commission = salary * commission_pct 를 구하여 사번, first_name, job_id 조회
SELECT
	e.JOB_ID,
	e.EMPLOYEE_ID,
	e.FIRST_NAME,
	salary * commission_pct AS commission
FROM
	EMPLOYEES e
WHERE
	e.COMMISSION_PCT IS NOT NULL;

--함수
--18.first name 이 curtis 인 사람의 first_name, last_name, email, phone_number, job_id 조회
--단, job_id 결과는 소문자로 출력
SELECT
	LOWER(e.JOB_ID),
	e.EMAIL,
	e.FIRST_NAME,
	e.LAST_NAME,
	e.PHONE_NUMBER
FROM
	EMPLOYEES e
WHERE
	e.FIRST_NAME = 'Curtis';
	--19. 부서번호가 60,70,80,90 인 사원들의 사원번호, first_name, hire_date, job_id 조회
	--단, job_id가 it_prog 인 사원의 경우 프로그래머로 변경하여 출력
SELECT
	REPLACE(e.JOB_ID, 'IT_PROG', '프로그래머'),
	e.HIRE_DATE ,
	e.FIRST_NAME,
	e.EMPLOYEE_ID
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (60, 70, 80, 90);

--20. job_id 가 ad_pres, pu_clerk 인 사원들의 사원번호, first_name, last_name, 부서번호, job_id 조화
--단, 사원명은 first_name과 last_name 을 연결하여 출력
SELECT
	e.JOB_ID,
	e.FIRST_NAME || ' ' || e.LAST_NAME,
	e.EMPLOYEE_ID,
	e.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	e.JOB_ID IN ('AD_PRES', 'PU_CLERK');


--21. 회사 내의 최대연봉 및 최소연봉의 차이를 조회 sal_gap
SELECT 
MAX(E.SALARY ) - MIN(E.SALARY ) AS SAL_GAP
FROM EMPLOYEES e ;

--22. 매니저로 근무하는 사원들의 총 숫자 조회
SELECT  
COUNT(DISTINCT E.MANAGER_ID ) AS "매니저 수"
FROM EMPLOYEES e ;

--23. 매니저가 없는 사원들은 제외하고 매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원 조회
-- 단, 매니저가 관리하는 사원 중에서 연봉이 6000미만인 사원 제외
-- 매니저 아이디 최소급여
SELECT
	MIN(E.SALARY),
	e.MANAGER_ID
FROM
	EMPLOYEES e
WHERE
	E.MANAGER_ID IS NOT NULL
GROUP BY
	e.MANAGER_ID
HAVING
	MIN(E.SALARY) >= 6000 ;


-- 서브 쿼리와 조인
SELECT 
    e.EMPLOYEE_ID,
    e.FIRST_NAME,
    e.SALARY,
    e.MANAGER_ID
FROM EMPLOYEES e
INNER JOIN (
    SELECT 
        MANAGER_ID,
        MIN(SALARY) as MIN_SALARY
    FROM EMPLOYEES
    WHERE MANAGER_ID IS NOT NULL
    GROUP BY MANAGER_ID
    HAVING MIN(SALARY) >= 6000
) M ON e.MANAGER_ID = m.MANAGER_ID 
   AND e.SALARY = m.MIN_SALARY;

SELECT
	e.EMPLOYEE_ID,
	e.FIRST_NAME,
	e.SALARY,
	E.MANAGER_ID
FROM
	EMPLOYEES e
WHERE
	e.MANAGER_ID IS NOT NULL
	AND e.SALARY >= 6000
	AND e.SALARY = (
	SELECT
		MIN(SALARY)
	FROM
		EMPLOYEES
	WHERE
		MANAGER_ID = e.MANAGER_ID);
--24. 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
-- EMPLOYEES SELF JOIN
SELECT
	E1.EMPLOYEE_ID AS 내아이디,
	E1.FIRST_NAME AS 내이름,
	E1.MANAGER_ID AS 내매니저아이디,
	E1.HIRE_DATE AS 내입사일,
	E2.FIRST_NAME AS 매니저명,
	E2.HIRE_DATE AS 매니저입사일
FROM
	EMPLOYEES e1
JOIN EMPLOYEES e2 ON
	e1.MANAGER_ID = e2.EMPLOYEE_ID
	AND
	E1.HIRE_DATE < E2.HIRE_DATE ;


--25. 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, LAST_NAME, 부서번호 조회
-- EMPLOYEES, DEPARTMENTS, LOCATIONS
SELECT
	E.EMPLOYEE_ID ,
	E.DEPARTMENT_ID ,
	E.LAST_NAME,
	L.CITY 
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID 
	WHERE L.CITY LIKE 'T%';

--26. 위치 ID가 1700인 사원들의 사번, LAST_NAME, 부서번호, 연봉 조회
-- EMPLOYEES, DEPARTMENTS,
SELECT
	E.EMPLOYEE_ID ,
	E.DEPARTMENT_ID ,
	E.LAST_NAME,
	E.SALARY 
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.LOCATION_ID = 1700;

--27. 부서명, 위치 ID, 각 부서별 사원 총수, 부서별 평균 연봉 조회 평균 연봉은 소수점 2자리 까지만
-- EMPLOYEES, DEPARTMENTS,
SELECT
	D.DEPARTMENT_NAME ,
	ROUND(AVG(E.SALARY), 2),
	COUNT(E.JOB_ID) AS CNT,
	D.LOCATION_ID
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID ;


--28. EXECUTIVE 부서에 근무하는 모든 사원들의 LAST_NAME, 부서번호, 부서명, JOB_ID 조회
-- EMPLOYEES, DEPARTMENTS,
SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID,
	D.DEPARTMENT_NAME ,
	E.JOB_ID
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE
	d.DEPARTMENT_NAME = 'Executive';


--29. 각 사원별 소속부서에서 자신보다 늦게 고용되었으나 보다 많은 연봉을 받는 사원이 존재하는 모든 사원들의 이름 조회
-- 이름은 연결해서 출력
SELECT
	DISTINCT E1.EMPLOYEE_ID,
	E1.FIRST_NAME || ' ' || E1.LAST_NAME AS 내이름
FROM
	EMPLOYEES e1
JOIN EMPLOYEES e2 ON
	e1.DEPARTMENT_ID = e2.DEPARTMENT_ID
	AND
	E1.HIRE_DATE < E2.HIRE_DATE
	AND
E1.SALARY <E2.SALARY ;

-- 서브 쿼리
-- 30. JOB_ID 가 'SA_MAN' 인 사원들의 최대 연봉보다 높게 받는 사원들의 LAST_NAME, JOB_ID, SALARY 조회
SELECT
	e.LAST_NAME ,
	e.JOB_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	E.SALARY > (
	SELECT
		MAX(E2.SALARY)
	FROM
		EMPLOYEES e2
	WHERE
		E2.JOB_ID = 'SA_MAN');


-- 31. 커미션을 받는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, 부서번호, 급여 조회
SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
JOIN
	(
	SELECT DISTINCT 
		E.DEPARTMENT_ID ,
		E.SALARY
	FROM
		EMPLOYEES e
	WHERE
		E.COMMISSION_PCT IS NOT NULL
)M ON
	E.DEPARTMENT_ID = M.DEPARTMENT_ID
	AND E.SALARY = M.SALARY ;
	
SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	(E.DEPARTMENT_ID ,
	E.SALARY) IN (
	SELECT
		E2.DEPARTMENT_ID ,
		E2.SALARY 
	FROM
		EMPLOYEES e2
	WHERE
		E2.COMMISSION_PCT IS NOT NULL) ;

	
	
	
-- 32. 회사 전체 평균 연봉보다 더 버는 사원들 중 LAST NAME 에 u가 들어있는 사원들이 근무하는 부서에서 
-- 근무하는 사원들의 사번, LAST NAME, SALARY 조회
-- 단, 평균연봉은 반올림
SELECT
	E.EMPLOYEE_ID ,
	E.JOB_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	E.DEPARTMENT_ID IN
	(
	SELECT
		DISTINCT E.DEPARTMENT_ID
	FROM
		EMPLOYEES e
	WHERE
		E.LAST_NAME LIKE '%u%'
		AND E.SALARY > (
		SELECT
			ROUND(AVG(SALARY))
		FROM
			EMPLOYEES e));
		
-- 33. 위치 ID 가 1700인 사원들의 급여, 커미션 추출 뒤 추출된 사원들의 급여와 커미션이 동일한 사원정보 출력
-- 사번, 이름, 부서번호, 급여
SELECT
	E.EMPLOYEE_ID ,
	E.FIRST_NAME || E.LAST_NAME AS NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
WHERE
	(E.SALARY ,
	NVL(E.COMMISSION_PCT , 0)) IN (
	SELECT
		e2.SALARY,
		NVL(E2.COMMISSION_PCT , 0)
	FROM
		EMPLOYEES e2
	JOIN DEPARTMENTS d ON
		e2.DEPARTMENT_ID = d.DEPARTMENT_ID
		AND D.LOCATION_ID = 1700 );

	
	
	

-- 34. 총 사원 수 및 2011, 2012, 2013, 2014 년도 별 고용된 사원들의 총 수 조회
-- SELECT 절에 사용하는 서브쿼리로 작성
SELECT DISTINCT
	(
	SELECT
		 COUNT(E3.DEPARTMENT_ID)
	FROM
		EMPLOYEES e3) AS 총사원수,
	(
	SELECT
		 COUNT(*)
	FROM
		EMPLOYEES e2
	GROUP BY
		TO_CHAR(E2.HIRE_DATE , 'YYYY')
	HAVING
		TO_CHAR(E2.HIRE_DATE , 'YYYY') = '2011') AS "2011입사자"
FROM
	EMPLOYEES e ;

SELECT DISTINCT
	(
	SELECT
		 COUNT(E3.DEPARTMENT_ID)
	FROM
		EMPLOYEES E3) AS 총사원수,
	(
	SELECT
		COUNT(*)
	FROM
		EMPLOYEES e2
	WHERE
		TO_CHAR(E2.HIRE_DATE , 'YYYY') = '2011') AS "2011 입사자",
	(
	SELECT
		COUNT(*)
	FROM
		EMPLOYEES e2
	WHERE
		TO_CHAR(E2.HIRE_DATE , 'YYYY') = '2012')AS "2012 입사자",
	(
	SELECT
		COUNT(*)
	FROM
		EMPLOYEES e2
	WHERE
		TO_CHAR(E2.HIRE_DATE , 'YYYY') = '2013')AS "2013 입사자",
	(
	SELECT
		COUNT(*)
	FROM
		EMPLOYEES e2
	WHERE
		TO_CHAR(E2.HIRE_DATE , 'YYYY') = '2014')AS "2014 입사자"
FROM
	EMPLOYEES e ;
	
	







